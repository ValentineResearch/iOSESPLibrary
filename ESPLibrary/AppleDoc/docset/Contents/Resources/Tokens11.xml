<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/ESPResponseExpector.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/ESPResponseExpector</TokenIdentifier>
			<Abstract type="html">ESPResponseExpector</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
            
			
			<NodeRef refid="11"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ESPResponseExpector/expector</TokenIdentifier>
			<Abstract type="html">Convenience method to allocate, initialize, and return a new response expector</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>+ (instancetype)expector</Declaration>
			
			
			<Anchor>//api/name/expector</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/addResponseID:</TokenIdentifier>
			<Abstract type="html">Adds a packet ID that identifies the type of response to be expected</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>- (void)addResponseID:(ESPPacketID)responseID</Declaration>
			<Parameters>
				<Parameter>
					<Name>responseID</Name>
					<Abstract type="html">the packet ID of the type of response to expect </Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addResponseID:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/hasResponseID:</TokenIdentifier>
			<Abstract type="html">Tells whether the given packet ID matches any of the expector&apos;s response IDs</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>- (BOOL)hasResponseID:(ESPPacketID)responseID</Declaration>
			<Parameters>
				<Parameter>
					<Name>responseID</Name>
					<Abstract type="html">the packet ID to look for</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the expector has a matching response ID, or NO if it does not have a matching response ID </Abstract></ReturnValue>
			<Anchor>//api/name/hasResponseID:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/markSentRequest:withPacket:</TokenIdentifier>
			<Abstract type="html">Marks a request as sent. The given request&apos;s responseExpector property should be this response expector, and the method will throw an exception if it is not. When this method is called, the request&apos;s responseExpector property is set to nil to prevent a retain loop.</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>- (void)markSentRequest:(ESPRequest *)request withPacket:(ESPPacket *)packet</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">the request to mark as sent</Abstract>
				</Parameter><Parameter>
					<Name>packet</Name>
					<Abstract type="html">the packet that was sent for the request </Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/markSentRequest:withPacket:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/hasPacketIdenticalTo:</TokenIdentifier>
			<Abstract type="html">Checks if any of the request packets have the same memory address as the given packet</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>- (BOOL)hasPacketIdenticalTo:(ESPPacket *)packet</Declaration>
			<Parameters>
				<Parameter>
					<Name>packet</Name>
					<Abstract type="html">the packet to compare packet data against</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the expector contains a matching packet, or NO if it does not contain a matching packet </Abstract></ReturnValue>
			<Anchor>//api/name/hasPacketIdenticalTo:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/hasPacketWithID:destination:</TokenIdentifier>
			<Abstract type="html">Checks if any of the request packets&apos; identifiers and destinations match the given packet identifier and destination</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>- (BOOL)hasPacketWithID:(ESPPacketID)packetID destination:(ESPDeviceID)destination</Declaration>
			<Parameters>
				<Parameter>
					<Name>packetID</Name>
					<Abstract type="html">the identifier of the packet to match against</Abstract>
				</Parameter><Parameter>
					<Name>destination</Name>
					<Abstract type="html">the destination of the packet to match against</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the expector contains a matching packet identifier, or NO if it does not contain a matching packet identifier </Abstract></ReturnValue>
			<Anchor>//api/name/hasPacketWithID:destination:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/hasPacketWithDestination:</TokenIdentifier>
			<Abstract type="html">Checks if any of the request packets&apos; destinations match the given ESP device identifier</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>- (BOOL)hasPacketWithDestination:(ESPDeviceID)destination</Declaration>
			<Parameters>
				<Parameter>
					<Name>destination</Name>
					<Abstract type="html">the device identifier of the destination</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the expector contains a matching packet destination, or NO if it does not contain a matching packet destination </Abstract></ReturnValue>
			<Anchor>//api/name/hasPacketWithDestination:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/isInBusyQueue:</TokenIdentifier>
			<Abstract type="html">Checks if any of the request packets&apos; identifiers match identifiers in the busy queue. If a packet does match, the index of the match is marked, and any subsequent checks will only check up to the previous match index</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>- (BOOL)isInBusyQueue:(NSArray&lt;NSNumber*&gt; *)busyQueue</Declaration>
			<Parameters>
				<Parameter>
					<Name>busyQueue</Name>
					<Abstract type="html">an array of packet identifiers</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the busy queue contains a matching packet identifier, or NO if the busy queue does not contain a matching packet identifier </Abstract></ReturnValue>
			<Anchor>//api/name/isInBusyQueue:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/isExpiredWithTimeout:</TokenIdentifier>
			<Abstract type="html">Checks if the response expector has timed out with the given timeout value</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>- (BOOL)isExpiredWithTimeout:(NSTimeInterval)timeout</Declaration>
			<Parameters>
				<Parameter>
					<Name>timeout</Name>
					<Abstract type="html">the amount of time after the requests were sent to time out</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the expector has timed out, or NO if the expector has not timed out </Abstract></ReturnValue>
			<Anchor>//api/name/isExpiredWithTimeout:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/dateOfSentPacket:</TokenIdentifier>
			<Abstract type="html">Gets the date/time that a particular packet was sent</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>- (NSDate *)dateOfSentPacket:(ESPPacket *)packet</Declaration>
			<Parameters>
				<Parameter>
					<Name>packet</Name>
					<Abstract type="html">the packet that was sent for this response expector</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">a date object with the sent timestamp, or nil if the packet is not associated with this response expector </Abstract></ReturnValue>
			<Anchor>//api/name/dateOfSentPacket:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/setRequestTimestamp:</TokenIdentifier>
			<Abstract type="html">The date/time that the first request was sent at, or nil if no requests have been marked as sent</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSDate *requestTimestamp</Declaration>
			
			
			<Anchor>//api/name/requestTimestamp</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/requestTimestamp</TokenIdentifier>
			<Abstract type="html">The date/time that the first request was sent at, or nil if no requests have been marked as sent</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSDate *requestTimestamp</Declaration>
			
			
			<Anchor>//api/name/requestTimestamp</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ESPResponseExpector/requestTimestamp</TokenIdentifier>
			<Abstract type="html">The date/time that the first request was sent at, or nil if no requests have been marked as sent</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSDate *requestTimestamp</Declaration>
			
			
			<Anchor>//api/name/requestTimestamp</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/setResponseIDs:</TokenIdentifier>
			<Abstract type="html">The packet identifiers of the expected responses</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray&lt;NSNumber*&gt; *responseIDs</Declaration>
			
			
			<Anchor>//api/name/responseIDs</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/responseIDs</TokenIdentifier>
			<Abstract type="html">The packet identifiers of the expected responses</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray&lt;NSNumber*&gt; *responseIDs</Declaration>
			
			
			<Anchor>//api/name/responseIDs</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ESPResponseExpector/responseIDs</TokenIdentifier>
			<Abstract type="html">The packet identifiers of the expected responses</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray&lt;NSNumber*&gt; *responseIDs</Declaration>
			
			
			<Anchor>//api/name/responseIDs</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/setSentPackets:</TokenIdentifier>
			<Abstract type="html">An array of packets that have been sent and are awaiting a response</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray&lt;ESPPacket*&gt; *sentPackets</Declaration>
			
			
			<Anchor>//api/name/sentPackets</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/sentPackets</TokenIdentifier>
			<Abstract type="html">An array of packets that have been sent and are awaiting a response</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray&lt;ESPPacket*&gt; *sentPackets</Declaration>
			
			
			<Anchor>//api/name/sentPackets</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ESPResponseExpector/sentPackets</TokenIdentifier>
			<Abstract type="html">An array of packets that have been sent and are awaiting a response</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray&lt;ESPPacket*&gt; *sentPackets</Declaration>
			
			
			<Anchor>//api/name/sentPackets</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/setPacketRecievedCallback:</TokenIdentifier>
			<Abstract type="html">The callback to call when a response packet is received. The callback should return YES if the expector has finished its business, or NO if the expector is still waiting on more packets</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) BOOL ( ^ ) ( ESPPacket *packet ) packetRecievedCallback</Declaration>
			
			
			<Anchor>//api/name/packetRecievedCallback</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/packetRecievedCallback</TokenIdentifier>
			<Abstract type="html">The callback to call when a response packet is received. The callback should return YES if the expector has finished its business, or NO if the expector is still waiting on more packets</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) BOOL ( ^ ) ( ESPPacket *packet ) packetRecievedCallback</Declaration>
			
			
			<Anchor>//api/name/packetRecievedCallback</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ESPResponseExpector/packetRecievedCallback</TokenIdentifier>
			<Abstract type="html">The callback to call when a response packet is received. The callback should return YES if the expector has finished its business, or NO if the expector is still waiting on more packets</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) BOOL ( ^ ) ( ESPPacket *packet ) packetRecievedCallback</Declaration>
			
			
			<Anchor>//api/name/packetRecievedCallback</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/setFailureCallback:</TokenIdentifier>
			<Abstract type="html">The callback to call when a request fails in some way</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( NSError *error ) failureCallback</Declaration>
			
			
			<Anchor>//api/name/failureCallback</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ESPResponseExpector/failureCallback</TokenIdentifier>
			<Abstract type="html">The callback to call when a request fails in some way</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( NSError *error ) failureCallback</Declaration>
			
			
			<Anchor>//api/name/failureCallback</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ESPResponseExpector/failureCallback</TokenIdentifier>
			<Abstract type="html">The callback to call when a request fails in some way</Abstract>
			<DeclaredIn>ESPResponseExpector.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( NSError *error ) failureCallback</Declaration>
			
			
			<Anchor>//api/name/failureCallback</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
        
        
	</File>
</Tokens>